diff --git a/configure.ac b/configure.ac
index ec31542..a1510ee 100644
--- a/configure.ac
+++ b/configure.ac
@@ -51,7 +51,7 @@ AC_SUBST(HTML_CHECK_RESULT)
 
 # Checks for pkg-config packages
 PKG_CHECK_MODULES(XCBPROTO, xcb-proto >= 1.12)
-NEEDED="pthread-stubs xau >= 0.99.2"
+NEEDED="xau >= 0.99.2"
 PKG_CHECK_MODULES(NEEDED, $NEEDED)
 
 have_xdmcp="no"
@@ -87,7 +87,15 @@ AC_MSG_RESULT($XCBPROTO_XCBPYTHONDIR)
 AC_SUBST(XCBPROTO_XCBPYTHONDIR)
 
 AC_HEADER_STDC
-AC_SEARCH_LIBS(getaddrinfo, socket)
+case $host_os in
+	*mingw*)
+			echo "MinGW detected - assuming getaddrinfo exists"
+			;;
+	*)
+			AC_SEARCH_LIBS(getaddrinfo, socket)
+			;;
+esac
+
 AC_SEARCH_LIBS(connect, socket)
 
 # Find support for sending a message from a socket
@@ -181,7 +189,15 @@ AC_SUBST(xcbincludedir)
 
 XCB_CHECK_VISIBILITY()
 
-AC_CHECK_FUNC(getaddrinfo, [AC_DEFINE(HAVE_GETADDRINFO, 1, [getaddrinfo() function is available])], )
+case $host_os in
+	# Windows has getaddrinfo, but it's not straightforward to get it to link, so let's just assume it's there
+	mingw*)
+			AC_DEFINE(HAVE_GETADDRINFO, 1, [getaddrinfo() function is available])
+			;;
+	*)
+			AC_CHECK_FUNC(getaddrinfo, [AC_DEFINE(HAVE_GETADDRINFO, 1, [getaddrinfo() function is available])], )
+	;;
+esac
 
 case $host_os in
         # darwin through Snow Leopard has poll() but can't be used to poll character devices.
diff --git a/src/xcb.h b/src/xcb.h
index 6873e79..4b9561c 100644
--- a/src/xcb.h
+++ b/src/xcb.h
@@ -27,6 +27,13 @@
 
 #ifndef __XCB_H__
 #define __XCB_H__
+
+#ifndef _WIN32
+#include <sys/uio.h>
+#else
+#include "xcb_windefs.h"
+#endif
+
 #include <sys/types.h>
 
 #if defined(__solaris__)
@@ -35,11 +42,6 @@
 #include <stdint.h>
 #endif
 
-#ifndef _WIN32
-#include <sys/uio.h>
-#else
-#include "xcb_windefs.h"
-#endif
 #include <pthread.h>
 
 
diff --git a/src/xcb_auth.c b/src/xcb_auth.c
index 29e2b6f..6db629b 100644
--- a/src/xcb_auth.c
+++ b/src/xcb_auth.c
@@ -72,7 +72,7 @@ enum auth_protos {
 #define AUTH_PROTO_XDM_AUTHORIZATION "XDM-AUTHORIZATION-1"
 #define AUTH_PROTO_MIT_MAGIC_COOKIE "MIT-MAGIC-COOKIE-1"
 
-static char *authnames[N_AUTH_PROTOS] = {
+static const char *authnames[N_AUTH_PROTOS] = {
 #ifdef HASXDMAUTH
     AUTH_PROTO_XDM_AUTHORIZATION,
 #endif
@@ -265,13 +265,14 @@ static int compute_auth(xcb_auth_info_t *info, Xauth *authptr, struct sockaddr *
 /* `sockaddr_un.sun_path' typical size usually ranges between 92 and 108 */
 #define INITIAL_SOCKNAME_SLACK 108
 
+#ifndef WIN32
+typedef int (*xcb_sock_ret_t)(int,struct sockaddr *,socklen_t *);
+#endif
 /* Return a dynamically allocated socket address structure according
    to the value returned by either getpeername() or getsockname()
    (according to POSIX, applications should not assume a particular
    length for `sockaddr_un.sun_path') */
-static struct sockaddr *get_peer_sock_name(int (*socket_func)(int,
-                                                              struct sockaddr *,
-                                                              socklen_t *),
+static struct sockaddr *get_peer_sock_name(xcb_sock_ret_t socket_func,
                                            int fd)
 {
     socklen_t socknamelen = sizeof(struct sockaddr) + INITIAL_SOCKNAME_SLACK;
diff --git a/src/xcb_conn.c b/src/xcb_conn.c
index 7d09637..7e8c596 100644
--- a/src/xcb_conn.c
+++ b/src/xcb_conn.c
@@ -104,7 +104,7 @@ static int set_fd_flags(const int fd)
 
 #ifdef _WIN32
    u_long iMode = 1; /* non-zero puts it in non-blocking mode, 0 in blocking mode */
-   int ret = 0;
+   int ret;
 
    ret = ioctlsocket(fd, FIONBIO, &iMode);
    if(ret != 0)
@@ -144,7 +144,7 @@ static int write_setup(xcb_connection_t *c, xcb_auth_info_t *auth_info)
     out.authorization_protocol_name_len = 0;
     out.authorization_protocol_data_len = 0;
     parts[count].iov_len = sizeof(xcb_setup_request_t);
-    parts[count++].iov_base = &out;
+    parts[count++].iov_base = (caddr_t) &out;
     parts[count].iov_len = XCB_PAD(sizeof(xcb_setup_request_t));
     parts[count++].iov_base = (char *) pad;
 
@@ -212,33 +212,48 @@ static int read_setup(xcb_connection_t *c)
 static int write_vec(xcb_connection_t *c, struct iovec **vector, int *count)
 {
     int n;
-    assert(!c->out.queue_len);
 
 #ifdef _WIN32
     int i = 0;
-    int ret = 0,err = 0;
+    int cnt=*count;
     struct iovec *vec;
     n = 0;
+    assert(!c->out.queue_len);
 
     /* Could use the WSASend win32 function for scatter/gather i/o but setting up the WSABUF struct from
        an iovec would require more work and I'm not sure of the benefit....works for now */
     vec = *vector;
-    while(i < *count)
+    while(i < cnt)
     {
-         ret = send(c->fd,vec->iov_base,vec->iov_len,0);
+      char *p= vec->iov_base;
+      size_t l= vec->iov_len;
+      while (l > 0)
+    {
+         int ret = send(c->fd, p, l, 0);
          if(ret == SOCKET_ERROR)
          {
-             err  = WSAGetLastError();
+             int err  = WSAGetLastError();
              if(err == WSAEWOULDBLOCK)
              {
+                 if (n)
+                 {
+                   /* already return the data */
+                   i=cnt;
+                   break;
+                 }
+                 else
                  return 1;
              }
          }
+         p += ret;
+         l -= ret;
          n += ret;
-         *vec++;
+      }
+      vec++;
          i++;
     }
 #else
+    assert(!c->out.queue_len);
     n = *count;
     if (n > IOV_MAX)
         n = IOV_MAX;
@@ -486,6 +501,13 @@ int _xcb_conn_wait(xcb_connection_t *c, pthread_cond_t *cond, struct iovec **vec
         }
 #else
         ret = select(c->fd + 1, &rfds, &wfds, 0, 0);
+	if (ret==SOCKET_ERROR)
+	{
+	   ret=-1;
+           errno = WSAGetLastError();
+	   if (errno == WSAEINTR)
+		   errno=EINTR;
+	}
 #endif
     } while (ret == -1 && errno == EINTR);
     if(ret < 0)
diff --git a/src/xcb_ext.c b/src/xcb_ext.c
index 831f283..990c67a 100644
--- a/src/xcb_ext.c
+++ b/src/xcb_ext.c
@@ -123,6 +123,8 @@ int _xcb_ext_init(xcb_connection_t *c)
 
 void _xcb_ext_destroy(xcb_connection_t *c)
 {
+    if (!c->ext.lock)
+      return; /* mutex is not initialised */
     pthread_mutex_destroy(&c->ext.lock);
     while(c->ext.extensions_size-- > 0)
         if(c->ext.extensions[c->ext.extensions_size].tag == LAZY_FORCED)
diff --git a/src/xcb_out.c b/src/xcb_out.c
index 3601a5f..3d849ea 100644
--- a/src/xcb_out.c
+++ b/src/xcb_out.c
@@ -33,13 +33,14 @@
 #include <stdlib.h>
 #include <unistd.h>
 #include <string.h>
+#include <X11/Xtrans/Xtrans.h>
 
 #include "xcb.h"
 #include "xcbext.h"
 #include "xcbint.h"
 #include "bigreq.h"
 
-static inline void send_request(xcb_connection_t *c, int isvoid, enum workarounds workaround, int flags, struct iovec *vector, int count)
+static __inline void send_request(xcb_connection_t *c, int isvoid, enum workarounds workaround, int flags, struct iovec *vector, int count)
 {
     if(c->has_error)
         return;
@@ -290,10 +291,10 @@ uint64_t xcb_send_request_with_fds64(xcb_connection_t *c, int flags, struct iove
         {
             prefix[0] = ((uint32_t *) vector[0].iov_base)[0];
             prefix[1] = ++longlen;
-            vector[0].iov_base = (uint32_t *) vector[0].iov_base + 1;
+            vector[0].iov_base = (caddr_t)((uint32_t *) vector[0].iov_base + 1);
             vector[0].iov_len -= sizeof(uint32_t);
             --vector, ++veclen;
-            vector[0].iov_base = prefix;
+            vector[0].iov_base = (caddr_t)prefix;
             vector[0].iov_len = sizeof(prefix);
         }
     }
diff --git a/src/xcb_util.c b/src/xcb_util.c
index a3357ef..3293091 100644
--- a/src/xcb_util.c
+++ b/src/xcb_util.c
@@ -327,7 +327,7 @@ static int _xcb_socket(int family, int type, int proto)
 
 
 static int _xcb_do_connect(int fd, const struct sockaddr* addr, int addrlen) {
-    int on = 1;
+    char on = 1;
 
     if(fd < 0)
         return -1;
@@ -338,6 +338,22 @@ static int _xcb_do_connect(int fd, const struct sockaddr* addr, int addrlen) {
     return connect(fd, addr, addrlen);
 }
 
+#ifdef WIN32
+int InitWSA(void)
+{
+  static WSADATA wsadata;
+
+  if (!wsadata.wVersion)
+  {
+    if (WSAStartup(0x0202, &wsadata))
+      return -1;
+  }
+  return 0;
+}
+#else
+#define InitWSA()
+#endif
+
 static int _xcb_open_tcp(const char *host, char *protocol, const unsigned short port)
 {
     int fd = -1;
@@ -377,6 +393,11 @@ static int _xcb_open_tcp(const char *host, char *protocol, const unsigned short
     }
 #endif
 
+#ifdef WIN32
+    if (InitWSA()<0)
+                return -1;
+#endif
+
     snprintf(service, sizeof(service), "%hu", port);
     if(getaddrinfo(host, service, &hints, &results))
         /* FIXME: use gai_strerror, and fill in error connection */
diff --git a/src/xcb_windefs.h b/src/xcb_windefs.h
index df6026d..558c1c6 100644
--- a/src/xcb_windefs.h
+++ b/src/xcb_windefs.h
@@ -31,15 +31,16 @@
 #define WINVER 0x0501 /* required for getaddrinfo/freeaddrinfo defined only for WinXP and above */
 #endif
 
+#define FD_SETSIZE 1024
+#include <X11/Xwinsock.h>
+#include <X11/XTrans/Xtrans.h>
 #include <winsock2.h>
 #include <ws2tcpip.h>
 #include <windef.h>
 
-struct iovec  {
-    void *iov_base;    /* Pointer to data.  */
-    int iov_len;       /* Length of data.  */
-};
+typedef unsigned char BYTE;
 
 typedef unsigned int in_addr_t;
+typedef int (WINAPI *xcb_sock_ret_t)(SOCKET, struct sockaddr *, int *);
 
 #endif /* xcb_windefs.h */
diff --git a/src/xcb_xid.c b/src/xcb_xid.c
index 79a9a27..7d9fc62 100644
--- a/src/xcb_xid.c
+++ b/src/xcb_xid.c
@@ -97,5 +97,7 @@ int _xcb_xid_init(xcb_connection_t *c)
 
 void _xcb_xid_destroy(xcb_connection_t *c)
 {
+    if (!c->xid.lock)
+      return; /* mutex was not initialised yet */
     pthread_mutex_destroy(&c->xid.lock);
 }
